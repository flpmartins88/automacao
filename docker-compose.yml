services:
#  registry:
#    image: registry:latest
#    ports:
#      - "5000:5000"
#    restart: always
#    environment:
#      REGISTRY_HTTP_SECRET: 12345678

  item-service:

#    build: item/build/docker
    image: item-service
    depends_on:
      - mysql
      - kafka-broker
      - schema-registry
    ports:
      - "8091:8091"
    environment:
      SPRING_PROFILES_ACTIVE: docker

  tag-service:
    build: tag/build/docker
    image: automation/tag-service
    depends_on:
      - mysql
      - kafka-broker
    ports:
      - "8092:8092"
    environment:
      SPRING_PROFILES_ACTIVE: docker


#  rabbit:
#    image: rabbitmq:3-management-alpine
#    ports:
#      - 5672:5672
#      - 15692:15692
#      - 15672:15672
##      15691/tcp, 15692/tcp, 25672/tcp, 4369/tcp, 5671/tcp, 5672/tcp
#    environment:
#      - RABBITMQ_DEFAULT_USER=rabbit
#      - RABBITMQ_DEFAULT_PASS=rabbit

  mysql:
    image: mysql/mysql-server
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_ROOT_HOST=%
    volumes:
      - ./data/setup-database.sql:/docker-entrypoint-initdb.d/setup-database.sql

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      retries: 20
      interval: 10s
    ports:
      - 2181:2181
      - 2182:2182
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SECURE_CLIENT_PORT: 2182

  kafka-broker:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-broker
    container_name: kafka-broker
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: curl --user superUser:superUser -fail --silent --insecure https://kafka1:8091/kafka/v3/clusters/ --output /dev/null || exit 1
      interval: 10s
      retries: 25
      start_period: 20s
    ports:
      - 8091:8091
      - 9091:9091
      - 10091:10091
      - 11091:11091
      - 12091:12091
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2182
      KAFKA_ZOOKEEPER_SET_ACL: 'true'
      #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:SASL_PLAINTEXT,TOKEN:SASL_SSL,SSL:SSL,CLEAR:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      #KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9091,TOKEN://kafka1:10091,SSL://kafka1:11091,CLEAR://kafka1:12091

      KAFKA_SUPER_USERS: User:admin;User:mds;User:superUser;User:ANONYMOUS
      KAFKA_LOG4J_LOGGERS: "kafka.authorizer.logger=INFO"
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO

      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: "r1"
      #KAFKA_JMX_PORT: 9991

      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka-broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka1:29092
      SCHEMA_REGISTRY_LISTENERS: https://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: SASL_SSL

#  rest-proxy:
#    image: confluentinc/cp-kafka-rest:latest
#    depends_on:
#      - zookeeper
#      - kafka-broker
#      - schema-registry
#    ports:
#      - 8082:8082
#    hostname: rest-proxy
#    container_name: rest-proxy
#    environment:
#      KAFKA_REST_HOST_NAME: rest-proxy
#      KAFKA_REST_BOOTSTRAP_SERVERS: 'kafka-broker:29092'
#      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
#      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    hostname: control-center
    container_name: control-center
    depends_on:
      - zookeeper
      - kafka-broker
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka-broker:9092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  kafka-setup:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-setup
    container_name: kafka-setup
    depends_on:
      - kafka-broker
      - schema-registry
    entrypoint: /bin/sh -c
    command: >
      "
        echo Waiting for Kafka to be ready...;

        cub kafka-ready -b kafka-broker:29092 1 20

        kafka-topics --create --if-not-exists \
                     --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 \
                     --topic tag_events \

        echo Trying to create topic item

        kafka-topics --create --if-not-exists \
                     --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 \
                     --topic item

        kafka-topics --create --if-not-exists \
                     --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 \
                     --topic item_produced

        kafka-topics --create --if-not-exists \
                     --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 \
                     --topic order

      kafka-topics --create --if-not-exists \
                     --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 \
                     --topic customer

      kafka-topics --create --if-not-exists \
                     --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 \
                     --topic payment

      kafka-topics --create --if-not-exists \
                     --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 \
                     --topic order_completed

      "
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

#  frontend:
#    build:
#      context: frontend/
#      dockerfile: Dockerfile
#    image: automacao/frontend
#    ports:
#      - '4200:80'
#  proxy:
#    image: nginx
#    ports:
#    - "80:80"
#    volumes:
#    - ./nginx/:/etc/nginx/conf.d/
